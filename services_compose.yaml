name: Build and Test C# Services, Frontend, and Playwright with aleternate docker compose

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - uses: actions/checkout@v4

      # Set up .NET SDK for C# services
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # Restore dependencies for all C# projects
      - name: Restore C# dependencies
        run: dotnet restore

      # Build all C# projects except TestingProject
      - name: Build C# services (excluding TestingProject)
        run: |
          for project in $(find . -name '*.csproj' ! -path './TestingProject/*'); do
            dotnet build --no-restore $project
          done

      # Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Start Docker Compose services (MailDev and MySQL)
      - name: Start Docker Compose services
        run: |
          docker-compose -f services_compose.yaml up -d  # Start services in the background
          sleep 10  # Wait for the services to start

      # Start C# services in the background (excluding TestingProject)
      - name: Start C# services in the background (excluding TestingProject)
        run: |
          for project in $(find . -name '*.csproj' ! -path './TestingProject/*'); do
            nohup dotnet run --project $project & 
          done

      # Set up Node.js for frontend build
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Install frontend dependencies
      - name: Install Frontend Dependencies
        run: npm install
        working-directory: ./front-end  # Adjust the directory to where your frontend code resides

      # Build the frontend React app
      - name: Build Frontend
        run: npm run build
        working-directory: ./front-end

      # Run frontend server in the background and check if it runs correctly
      - name: Start Frontend Development Server
        run: |
          npm run start & # Run the server in the background
          sleep 10 # Wait for the server to start
          curl -I http://localhost:3000 | grep "200 OK" # Check if the server responds with 200 OK
        working-directory: ./front-end

      # Install Playwright dependencies
      - name: Install Playwright Dependencies
        run: |
          npm install @playwright/test
        working-directory: ./PlaywrightTesting

      # Install Chromium with Playwright
      - name: Install Chromium
        run: npx playwright install chromium --with-deps
        working-directory: ./PlaywrightTesting

      # Run Playwright tests with Chromium
      - name: Run Playwright tests with Chromium
        run: npx playwright test --project=chromium
        working-directory: ./PlaywrightTesting

      # Upload Playwright test results
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      # Clean up Docker Compose services
      - name: Clean up Docker Compose services
        run: |
          docker-compose -f services_compose.yaml down  # Stop and remove containers
